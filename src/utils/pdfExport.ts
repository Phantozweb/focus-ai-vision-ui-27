
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';
import { marked } from 'marked';

// Function to render markdown content to HTML
export async function renderMarkdown(markdown: string): Promise<string> {
  return await marked.parse(markdown);
}

// Core function to export markdown content directly to PDF
export async function exportMarkdownReportAsPdf(
  elementId: string,
  markdownContent: string,
  svgIconId: string,
  fileName: string = 'report.pdf'
): Promise<void> {
  try {
    // Get the container and prepare it for export
    const exportContainer = document.getElementById(elementId);
    const markdownTarget = exportContainer?.querySelector('#markdownContent');

    if (!exportContainer) {
      throw new Error(`Export container with ID '${elementId}' not found.`);
    }
    
    if (!markdownTarget) {
      throw new Error(`Markdown target '#markdownContent' not found within #${elementId}.`);
    }

    // Parse Markdown and inject into the container
    try {
      const htmlContent = await marked.parse(markdownContent);
      markdownTarget.innerHTML = htmlContent;
    } catch (error) {
      console.error('Error parsing Markdown:', error);
      markdownTarget.innerHTML = '<p>Error loading content.</p>';
    }

    // Store original display style and make container visible for capture
    const originalDisplayStyle = exportContainer.style.display;
    const originalVisibility = exportContainer.style.visibility;
    exportContainer.style.display = 'block';
    exportContainer.style.visibility = 'visible';

    // Allow rendering time after DOM update
    await new Promise(resolve => setTimeout(resolve, 200));

    try {
      // Enhanced capture configuration with better settings
      const canvas = await html2canvas(exportContainer, {
        scale: 2, // Higher scale for better quality
        useCORS: true, // Allow cross-origin images
        logging: false,
        backgroundColor: '#ffffff',
        allowTaint: true,
        scrollY: -window.scrollY,
        windowWidth: 800,
        windowHeight: document.documentElement.offsetHeight,
        onclone: (clonedDoc) => {
          const clonedElement = clonedDoc.getElementById(elementId);
          if (clonedElement) {
            clonedElement.style.display = 'block';
            clonedElement.style.visibility = 'visible';
            clonedElement.style.position = 'relative';
            clonedElement.style.width = '800px';
            clonedElement.style.margin = '0';
            clonedElement.style.padding = '20px';
            
            // Enhanced table styling
            Array.from(clonedElement.querySelectorAll('table')).forEach(table => {
              table.style.width = '100%';
              table.style.borderCollapse = 'collapse';
              table.style.margin = '10px 0';
            });
            
            Array.from(clonedElement.querySelectorAll('th')).forEach(th => {
              th.style.backgroundColor = '#f0f8ff';
              th.style.padding = '8px';
              th.style.borderBottom = '1px solid #ddd';
              th.style.textAlign = 'left';
            });
            
            Array.from(clonedElement.querySelectorAll('td')).forEach(td => {
              td.style.padding = '8px';
              td.style.borderBottom = '1px solid #eee';
            });

            // Remove any footer or "Generated by" text
            const footers = clonedElement.querySelectorAll('.pdf-footer');
            footers.forEach(footer => {
              if (footer instanceof HTMLElement) {
                footer.style.display = 'none';
              }
            });
          }
        }
      });

      // Restore original display style after capture
      exportContainer.style.display = originalDisplayStyle;
      exportContainer.style.visibility = originalVisibility;

      // Create PDF with proper dimensions
      const imgData = canvas.toDataURL('image/png');
      
      // Use A4 format
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      
      // Calculate image dimensions to fit on page
      const imgWidth = pdfWidth - 20; // 10mm margins on each side
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // Add image starting at top of first page (no blank page)
      pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
      
      // If content extends beyond page height, create additional pages
      if (imgHeight > pdfHeight - 20) {
        let remainingHeight = imgHeight;
        let currentPosition = 0;
        const pageHeight = pdfHeight - 20;
        
        // First page is already added, start from second page if needed
        while (remainingHeight > pageHeight) {
          // Add a new page
          pdf.addPage();
          
          // Calculate the position on the canvas for this page
          const heightOnThisPage = Math.min(remainingHeight, pageHeight);
          const scaleFactor = canvas.width / imgWidth;
          const sourceY = currentPosition * scaleFactor;
          
          // Fix: Correcting the addImage call to use the proper number of arguments
          // The previous call was passing too many arguments
          pdf.addImage(
            imgData,
            'PNG',
            10,
            10,
            imgWidth,
            heightOnThisPage,
            undefined,
            'FAST'
          );
          
          // Update tracking variables
          currentPosition += heightOnThisPage;
          remainingHeight -= heightOnThisPage;
        }
      }
      
      // Save the PDF without any footer text
      pdf.save(fileName);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      exportContainer.style.display = originalDisplayStyle;
      exportContainer.style.visibility = originalVisibility;
      throw error;
    }
  } catch (error) {
    console.error('PDF Export error:', error);
    throw error;
  }
}

// Simplified export function that uses the core function
export async function exportToPDF(
  containerId: string, 
  filename: string = 'report',
  markdownContent?: string
): Promise<void> {
  if (markdownContent) {
    return exportMarkdownReportAsPdf(containerId, markdownContent, '', filename);
  } else {
    console.error('No content provided for PDF export');
    throw new Error('No content provided for PDF export');
  }
}
